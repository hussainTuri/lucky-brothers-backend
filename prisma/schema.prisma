// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id Int @id @default(autoincrement())
  sku String? @db.VarChar(50) @unique
  productName String @db.VarChar(255)
  productTypeId Int @db.Int
  stockQuantity Int? @db.Int @default(0)
  manufacturer String? @db.VarChar(255)
  manufacturingYear Int? @db.Int
  imagePath String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  size String? @db.VarChar(255)
  diameter Int? @db.Int
  speedIndex String? @db.VarChar(255)
  loadIndex String? @db.VarChar(255)
  season String? @db.VarChar(255)
  width Int? @db.Int
  height Int? @db.Int
  length Int? @db.Int
  startStop Int? @db.Int
  design String? @db.VarChar(255)
  threadSize String? @db.VarChar(255)
  buyingPrice Int? @db.Int // @deprecated
  sellingPrice Int? @db.Int
  isActive Boolean @default(true)
  priceHistory PriceHistory[]
  productType ProductType @relation(fields: [productTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoiceItems InvoiceItem[]
  inventories Inventory[]
  productStocks ProductStock[]
}

model ProductType {
  id Int @id @default(autoincrement())
  typeName String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}

model PriceHistory {
  id Int @id @default(autoincrement())
  productId Int @db.Int
  buyingPrice Int @db.Int
  sellingPrice Int @db.Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductStock {
  id Int @id @default(autoincrement())
  productId Int @db.Int
  pricePerItem Int @db.Int
  originalQuantity Int @db.Int
  remainingQuantity Int @db.Int
  comment String? @db.VarChar(255)
  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  invoiceItemProductStocks InvoiceItemProductStock[]
  @@index([createdAt])
  @@index([remainingQuantity])
}
model Inventory {
  id Int @id @default(autoincrement())
  productId Int @db.Int
  quantity Int @db.Int
  reason String @db.VarChar(255)
  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  @@index([createdAt])
}

model Customer {
  id Int @id @default(autoincrement())
  customerName String @db.VarChar(255)
  email String? @db.VarChar(255)
  phone String @db.VarChar(255) @unique
  address String? @db.VarChar(255)
  imagePath String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance Int? @db.Int @default(0)
  invoices Invoice[]
  transactions CustomerTransaction[]
  @@fulltext([customerName])
}

model CustomerTransaction {
  id Int @id @default(autoincrement())
  customerId Int @db.Int
  invoiceId Int? @db.Int
  amount Int @db.Int
  comment String? @db.VarChar(255)
  typeId Int @db.TinyInt // 1: payment, 2: invoice
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customer Customer @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice Invoice? @relation(fields: [invoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoicePayments InvoicePayment[]
  @@index([createdAt])
  @@index([updatedAt])
  @@index([typeId])
}

model Invoice {
  id Int @id @default(autoincrement())
  customerId Int? @db.Int
  totalAmount Int @db.Int
  dueDate DateTime? @db.DateTime
  statusId Int @db.Int
  comment String? @db.VarChar(255)
  cancelledAt DateTime? @db.DateTime
  refundedAt DateTime? @db.DateTime
  driverName String? @db.VarChar(255)
  vehicleName String? @db.VarChar(255)
  vehicleRegistrationNumber String? @db.VarChar(255)
  profit Int? @db.Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items InvoiceItem[]
  payments InvoicePayment[]
  status InvoiceStatus @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions CustomerTransaction[]
  @@index([dueDate])
  @@index([createdAt])
  @@index([updatedAt])
}

model InvoiceItem {
  id Int @id @default(autoincrement())
  invoiceId Int @db.Int
  productId Int @db.Int
  quantity Int @db.Int
  price Int @db.Int
  subTotal Int @db.Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productStocks InvoiceItemProductStock[]
}

model InvoiceItemProductStock {
  id Int @id @default(autoincrement())
  invoiceItemId Int @db.Int
  productStockId Int @db.Int
  quantity Int @db.Int
  createdAt DateTime @default(now())
  invoiceItem InvoiceItem @relation(fields: [invoiceItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productStock ProductStock @relation(fields: [productStockId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index([createdAt])
  @@unique([invoiceItemId, productStockId])
}

model InvoiceStatus {
  id Int @id @default(autoincrement())
  statusName String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoices Invoice[]
}

model InvoicePayment {
  id Int @id @default(autoincrement())
  invoiceId Int @db.Int
  customerTransactionId Int? @db.Int
  amount Int @db.Int
  comment String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customerPayment CustomerTransaction? @relation(fields: [customerTransactionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index([createdAt])
  @@index([updatedAt])
 }

model User {
  id Int @id @default(autoincrement())
  fullName String? @db.VarChar(255)
  username String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  phone String? @db.VarChar(255)
  address String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id Int @id @default(autoincrement())
  amount Int @db.Int
  description String @db.VarChar(255)
  expenseDate DateTime @db.DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthlyProfit {
  id Int @id @default(autoincrement())
  monthYear String @db.VarChar(7)
  sales Int @db.Int
  expense Int @db.Int
  profit Int @db.Int
  description String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 @@unique([monthYear])
}
